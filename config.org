* Packages
** usepackage
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+end_src
** Haskell - V1
#+begin_src emacs-lisp
(use-package flymake-flycheck)
  (use-package dante
	:ensure t ; ask use-package to install the package
	:after haskell-mode
	:commands 'dante-mode
	:init
	;; flycheck backend deprecated October 2022
	;; (add-hook 'haskell-mode-hook 'flycheck-mode)

	(add-hook 'haskell-mode-hook 'flymake-mode)
	(remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
	(add-hook 'haskell-mode-hook 'dante-mode)
	(add-hook 'haskell-mode-hook
			  (defun my-fix-hs-eldoc ()
				(setq eldoc-documentation-strategy #'eldoc-documentation-default)))
	:config
	(require 'flymake-flycheck)
	(defalias 'flymake-hlint
	  (flymake-flycheck-diagnostic-function-for 'haskell-hlint))
	(add-to-list 'flymake-diagnostic-functions 'flymake-hlint))
#+end_src
** Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t)
(use-package tree-sitter-langs
  :ensure t)
(tree-sitter-require 'cpp)
(tree-sitter-require 'c)
(tree-sitter-require 'haskell)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** better mx
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :config
  (smex-initialize))
(use-package vertico
  :ensure t
  :bind (:map vertico-map
	      ("C-j" . vertico-next)
	      ("C-k" . vertico-previous)
	      ("C-f" . vertico-exit))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))
(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** dashboard
# note: I should make a script to automate the download of the dashboard image
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-set-heading-icons t)
    (setq dashboard-display-icons-p t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "MS notepad: the ultimate editor")
    (setq dashboard-startup-banner "~/.config/emacs/logo.png")
    (setq dashboard-center-content t) ;; Center
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                    (bookmarks . "book"))))

  ;; Load in emacsclient
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** emojis
#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

** evil!
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-want-C-u-scroll t)
  (setq evil-split-window-below t)
  (evil-mode))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

  (use-package evil-tutor)
#+end_src
** projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src
** modeline
#+begin_src emacs-lisp
(use-package doom-modeline)
(doom-modeline-mode 1)
#+end_src

** general (keybinds)
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t))
#+end_src

** themes
#+begin_src emacs-lisp
(use-package doom-themes)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
(load-theme 'doom-one t)
#+end_src
** bullets
#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


#+begin_src emacs-lisp
#+end_src
#+begin_src emacs-lisp
#+end_src
#+begin_src emacs-lisp
#+end_src

* LSP
#+begin_src emacs-lisp
      (defun efs/lsp-mode-setup ()
        (lsp-headerline-breadcrumb-mode))

      (use-package lsp-mode
        :commands (lsp lsp-deferred)
        :hook (lsp-mode . efs/lsp-mode-setup)
        :init
        (setq lsp-keymap-prefix "C-c l"))  ;; Or 'C-l', 's-l')
      (use-package lsp-ui
        :hook (lsp-mode . lsp-ui-mode)
        :custom
        (lsp-ui-doc-position 'bottom))
	(use-package lsp-haskell)
        (use-package lua-mode)
        (use-package markdown-mode)
    (add-hook 'haskell-mode-hook #'lsp)
    (add-hook 'haskell-literate-mode-hook #'lsp)
    (use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
           (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
      :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
    (use-package company-box
      :hook (company-mode . company-box-mode))
     (use-package haskell-mode
    :mode "\\.hs\\'"
    :hook (haskell-mode . lsp-deferred)
    :config
    (setq haskell-indent-level 2))

  (use-package hindent
    :ensure t)
  (add-hook 'haskell-mode-hook #'hindent-mode)
#+end_src

* Settings
** selection mode deletion
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

** Bars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src
** Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src


#+begin_src emacs-lisp
    ;; zoom in/out like we do everywhere else.
    (global-set-key (kbd "C-=") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

    (nvmap :keymaps 'override :prefix "SPC"
	   "SPC"   '(counsel-M-x :which-key "M-x")
	   "c c"   '(compile :which-key "Compile")
	   "c C"   '(recompile :which-key "Recompile")
	   "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
	   "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
    (nvmap :keymaps 'override :prefix "SPC"
	   "m *"   '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
	   "m +"   '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
	   "m ."   '(counsel-org-goto :which-key "Counsel org goto")
	   "m e"   '(org-export-dispatch :which-key "Org export dispatch")
	   "m f"   '(org-footnote-new :which-key "Org footnote new")
	   "m h"   '(org-toggle-heading :which-key "Org toggle heading")
	   "m i"   '(org-toggle-item :which-key "Org toggle item")
	   "m n"   '(org-store-link :which-key "Org store link")
	   "m o"   '(org-set-property :which-key "Org set property")
	   "m t"   '(org-todo :which-key "Org todo")
	   "m x"   '(org-toggle-checkbox :which-key "Org toggle checkbox")
	   "m B"   '(org-babel-tangle :which-key "Org babel tangle")
	   "m I"   '(org-toggle-inline-images :which-key "Org toggle inline imager")
	   "m T"   '(org-todo-list :which-key "Org todo list")
	   "o a"   '(org-agenda :which-key "Org agenda")
	   )
    (set-face-attribute 'default nil
      :font "Inconsolata"
      :height 110
      :weight 'medium)
    (set-face-attribute 'variable-pitch nil
      :font "Iosevka"
      :height 120
      :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
      :font "Inconsolata"
      :height 110
      :weight 'medium)
    ;; Makes commented text and keywords italics.
    ;; This is working in emacsclient but not emacs.
    ;; Your font must have an italic face available.
    (set-face-attribute 'font-lock-comment-face nil
      :slant 'italic)
    (set-face-attribute 'font-lock-keyword-face nil
      :slant 'italic)

    ;; Uncomment the following line if line spacing needs adjusting.
    (setq-default line-spacing 0.12)
    ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
    (add-to-list 'default-frame-alist '(font . "Inconsolata-17"))
    ;; changes certain keywords to symbols, such as lamda!
    (setq global-prettify-symbols-mode t)
    (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
	   "."     '(find-file :which-key "Find file")
	   "f f"   '(find-file :which-key "Find file")
	   "f r"   '(counsel-recentf :which-key "Recent files")
	   "f s"   '(save-buffer :which-key "Save file")
	   "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
	   "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
	   "f C"   '(copy-file :which-key "Copy file")
	   "f D"   '(delete-file :which-key "Delete file")
	   "f R"   '(rename-file :which-key "Rename file")
	   "f S"   '(write-file :which-key "Save file as...")
	   "f U"   '(sudo-edit :which-key "Sudo edit file"))
    (global-set-key (kbd "C-c") (kbd "C-g"))
  (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
  (define-key evil-normal-state-map (kbd "C-c") 'evil-normal-state)

#+end_src
** General Settings
#+begin_src emacs-lisp
      (when (version<= "26.0.50" emacs-version )
        (global-display-line-numbers-mode))
      (setq display-line-numbers-type 'relative)
                    (setq confirm-kill-emacs 'y-or-n-p)
      (setq make-backup-files nil)
      (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
      (add-to-list 'default-frame-alist '(font . "Inconsolata-18"))
                (setq temporary-file-directory "~/.tmp/")
                 (setq backup-directory-alist
                  `((".*" . ,temporary-file-directory)))
              (setq warning-minimum-level :emergency)
                (setq auto-save-default nil)
                (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
              (setq-default indent-tabs-mode t)
              (setq-default tab-width 4)
              (setq indent-line-function 'insert-tab)
            (setq doom-modeline-time-icon t)
            (setq doom-modeline-icon t)
            (setq doom-modeline-buffer-file-name-style 'auto)
            (setq doom-modeline-buffer-name t)
            (setq doom-modeline-indent-info nil)
            (setq doom-modeline-buffer-encoding t)
            (setq doom-modeline-enable-word-count nil)
          (defun save-this-damn-buffer ()
            (interactive)

            (if (equal major-mode 'haskell-mode)(hindent-reformat-buffer))
            (save-buffer)
          )
          (defun save-and-kill-this-buffer()
            "Quits the buffer"
            (interactive)
            (if (equal major-mode 'haskell-mode)(hindent-reformat-buffer))
            (save-buffer)
            (kill-current-buffer))
          (defun quit-buffer()
            "Quits the buffer"
            (interactive)
            (kill-current-buffer))
            (evil-ex-define-cmd "w"  'save-this-damn-buffer)
            (evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)
            (evil-ex-define-cmd "q" 'quit-buffer)
          (defun electric-pair ()
            "Autoconnects a given char with another"
            (interactive)
            (if (eolp) (let (parens-require-spaces) (insert-pair)) (self-insert-command 1)))

        (add-hook 'c-mode-hook
              (lambda ()
                (define-key c-mode-map "\"" 'electric-pair)
                (define-key c-mode-map "\'" 'electric-pair)
                (define-key c-mode-map "(" 'electric-pair)
                (define-key c-mode-map "[" 'electric-pair)
                (define-key c-mode-map "{" 'electric-pair)))
        (add-hook 'lisp-mode-hook
              (lambda ()
                (define-key lisp-mode-map "\"" 'electric-pair)
                (define-key lisp-mode-map "\'" 'electric-pair)
                (define-key lisp-mode-map "(" 'electric-pair)
                (define-key lisp-mode-map "[" 'electric-pair)
                (define-key lisp-mode-map "{" 'electric-pair)))
        (add-hook 'scheme-mode-hook
              (lambda ()
                (define-key scheme-mode-map "\"" 'electric-pair)
                (define-key scheme-mode-map "\'" 'electric-pair)
                (define-key scheme-mode-map "(" 'electric-pair)
                (define-key scheme-mode-map "[" 'electric-pair)
                (define-key scheme-mode-map "{" 'electric-pair)))
        (add-hook 'haskell-mode-hook
              (lambda ()
                (define-key haskell-mode-map "\"" 'electric-pair)
                (define-key haskell-mode-map "\'" 'electric-pair)
                (define-key haskell-mode-map "(" 'electric-pair)
                (define-key haskell-mode-map "[" 'electric-pair)
                (define-key haskell-mode-map "{" 'electric-pair)))
         (add-hook 'LaTeX-mode-hook
              (lambda ()
                (define-key LaTeX-mode-map "\"" 'electric-pair)
                (define-key LaTeX-mode-map "\'" 'electric-pair)
                (define-key LaTeX-mode-map "(" 'electric-pair)
                (define-key LaTeX-mode-map "[" 'electric-pair)
                (define-key LaTeX-mode-map "{" 'electric-pair)))
      (use-package which-key
          :config
       (nvmap :prefix "SPC"
        "b b"   '(ibuffer :which-key "Ibuffer")
        "b c"   '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
        "b k"   '(kill-current-buffer :which-key "Kill current buffer")
        "b n"   '(next-buffer :which-key "Next buffer")
        "b p"   '(previous-buffer :which-key "Previous buffer")
        "b B"   '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
        "b K"   '(kill-buffer :which-key "Kill buffer")
        "r f"   '(dashboard-refresh-buffer :which-key "Refresh buffer"))
      (which-key-mode))
    (evil-select-search-module 'evil-search-module 'evil-search)
  (setq use-short-answers t)
#+end_src
